{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CropMonitoringService = /*#__PURE__*/(() => {\n  class CropMonitoringService {\n    constructor(http, baseURL) {\n      this.http = http;\n      this.baseURL = baseURL;\n      this.token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJVU0VSX05BTUUiOiJkZW1vQGdtYWlsLmNvbSIsIklEIjoiMzIiLCJDT01QQU5ZX0lEIjoiMSIsIlJPTEVfSUQiOiI1IiwiRklSU1RfTkFNRSI6IkRlbW8iLCJNSURETEVfTkFNRSI6bnVsbCwiTEFTVF9OQU1FIjoiU2t5bWV0IiwiUEhPTkVfTlVNQkVSIjoiOTkxMTIwMDEzMSIsIkVNQUlMIjoiZGVtb0BnbWFpbC5jb20iLCJMQVNUX0xPR0lOIjoiMjAyMS0wMi0yNSAxMzowMjoxOSIsIkhBU0hDT0RFIjoiZDk4NWU1ZGZiN2EyYWVhMzc4ZGE3NThhYzk4ZTI1NmQ2ZWVlOTE3ZCIsIkFDVElWRV9TVEFUVVMiOm51bGwsImlzX2FybXNfdXNlciI6IjEiLCJpc19ncmFtY292ZXJfdXNlciI6IjAiLCJwcmljaW5nIjoiMSIsImNyb3BfbW9uaXRvcmluZyI6IjEiLCJmYXJtZXJfZGlhcnkiOiIxIiwidXBkYXRlZF9hdCI6IjIwMTktMDItMDYgMTA6Mzc6MjUiLCJteXBvcnRmb2xpbyI6IjEiLCJwYXlvdXRfYWNjZXNzIjoiMSIsImlkIjoiMzIifQ.37BPWSll_fEicpYad5Wyf1DREhJqVUieD3I2Q4ESmSU';\n      this.headers = new HttpHeaders({\n        'Authorization': this.token\n      });\n    }\n\n    getState(id) {\n      const url = this.baseURL + `all-states?id=${id}`;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getDistrict(id, state) {\n      const url = this.baseURL + `all-districts?id=${id}&state=${state}`;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getSubDistrict(id, state, district) {\n      const url = this.baseURL + `all-sub-districts?id=${id}&state=${state}&district=${district}`;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getDate() {\n      const url = this.baseURL + 'fortnight-date-range';\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getInputData(id, token) {\n      const url = this.baseURL + 'inputdata?id=' + id + '&token=' + token;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getUserAssignData(id, token, season, year, phase) {\n      const url = this.baseURL + 'userassigneddata?id=' + id + '&token=' + token + '&season=' + season + '&year=' + year + '&phase=' + phase;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    exportRegionSpecificCropMonitoringData(id, token, season, year, phase, state, district, subDistrict) {\n      let url = this.baseURL + 'seprate-report?id=' + id + '&token=' + token + '&season=' + season + '&year=' + year + '&phase=' + phase;\n\n      if (state && state !== 'All State') {\n        url = url + '&state=' + state;\n      }\n\n      if (district && district !== 'District') {\n        url = url + '&district=' + district;\n      }\n\n      if (subDistrict && subDistrict !== 'Sub District') {\n        url = url + '&subdist=' + subDistrict;\n      }\n\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    exportAllCropMonitoringData(id, token, season, year, phase) {\n      const url = this.baseURL + 'alldata-report?id=' + id + '&token=' + token + '&season=' + season + '&year=' + year + '&phase=' + phase;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getSubDistrictList(id, token, state, district) {\n      const url = this.baseURL + 'subdistrict?id=' + id + '&token=' + token + '&state=' + state + '&district=' + district;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getStateId(state) {\n      let url = this.baseURL + 'getstateid?state=' + state + '&id=' + 32 + '&token=' + this.token;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getDistrictId(district) {\n      let url = this.baseURL + 'getdistrictid?district=' + district + '&id=' + 32 + '&token=' + this.token;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getSubDistrictId(subDistrict) {\n      let url = this.baseURL + 'getsubdistrictid?subdistrict=' + subDistrict + '&id=' + 32 + '&token=' + this.token;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    mailapiservice(body, token, id) {\n      let httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json' //Authorization: token\n\n        })\n      };\n      const bodyJson = JSON.stringify(body);\n      const filterUrl = this.baseURL + `mailapiservice?token=${token}&id=${id}&random=${Math.random()}`;\n      return this.http.post(filterUrl, bodyJson, httpOptions).toPromise();\n    }\n\n    getLayersDetails(id, year, from, to) {\n      let url = '';\n      url = this.baseURL + 'layers-details-gp-v1?from=' + from + '&to=' + to + '&id=' + id + '&token=' + this.token;\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    getFitBounds(id, state, district, subDistrict) {\n      let url = this.baseURL + 'map-bound?id=' + id + '&token=' + this.token;\n\n      if (state && state !== 'All State') {\n        url = url + '&state=' + state;\n      }\n\n      if (district && district !== 'District') {\n        url = url + '&district=' + district;\n      }\n\n      if (subDistrict && subDistrict !== 'Sub District') {\n        url = url + '&subdist=' + subDistrict;\n      }\n\n      return this.http.get(url).pipe(map(this.extractData));\n    }\n\n    extractData(res) {\n      const body = res;\n      return body;\n    }\n\n  }\n\n  CropMonitoringService.ɵfac = function CropMonitoringService_Factory(t) {\n    return new (t || CropMonitoringService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(\"baseURL\"));\n  };\n\n  CropMonitoringService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CropMonitoringService,\n    factory: CropMonitoringService.ɵfac,\n    providedIn: 'root'\n  });\n  return CropMonitoringService;\n})();","map":null,"metadata":{},"sourceType":"module"}