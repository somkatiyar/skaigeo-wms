{"ast":null,"code":"import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n  constructor(SchedulerAction, now = Scheduler.now) {\n    super(SchedulerAction, now);\n    this.actions = [];\n    this._active = false;\n  }\n\n  flush(action) {\n    const {\n      actions\n    } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error;\n    this._active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Somji/OneDrive/Pictures/abcd/node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js"],"names":["Scheduler","AsyncScheduler","constructor","SchedulerAction","now","actions","_active","flush","action","push","error","execute","state","delay","shift","unsubscribe"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,OAAO,MAAMC,cAAN,SAA6BD,SAA7B,CAAuC;AAC1CE,EAAAA,WAAW,CAACC,eAAD,EAAkBC,GAAG,GAAGJ,SAAS,CAACI,GAAlC,EAAuC;AAC9C,UAAMD,eAAN,EAAuBC,GAAvB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,KAAf;AACH;;AACDC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACV,UAAM;AAAEH,MAAAA;AAAF,QAAc,IAApB;;AACA,QAAI,KAAKC,OAAT,EAAkB;AACdD,MAAAA,OAAO,CAACI,IAAR,CAAaD,MAAb;AACA;AACH;;AACD,QAAIE,KAAJ;AACA,SAAKJ,OAAL,GAAe,IAAf;;AACA,OAAG;AACC,UAAKI,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeH,MAAM,CAACI,KAAtB,EAA6BJ,MAAM,CAACK,KAApC,CAAb,EAA0D;AACtD;AACH;AACJ,KAJD,QAIUL,MAAM,GAAGH,OAAO,CAACS,KAAR,EAJnB;;AAKA,SAAKR,OAAL,GAAe,KAAf;;AACA,QAAII,KAAJ,EAAW;AACP,aAAQF,MAAM,GAAGH,OAAO,CAACS,KAAR,EAAjB,EAAmC;AAC/BN,QAAAA,MAAM,CAACO,WAAP;AACH;;AACD,YAAML,KAAN;AACH;AACJ;;AA1ByC","sourcesContent":["import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}